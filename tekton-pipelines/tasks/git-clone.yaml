apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
spec:
  workspaces:
    - name: output
      description: The git repo will be cloned into this workspace
  params:
    - name: url
      description: Git repository URL
      type: string
    - name: revision
      description: Git revision to checkout (branch, tag, sha, refâ€¦)
      type: string
      default: "main"
    - name: submodules
      description: Initialize and fetch git submodules
      type: string
      default: "true"
    - name: depth
      description: Perform a shallow clone, fetching only the most recent N commits
      type: string
      default: "1"
    - name: sslVerify
      description: Set to false to skip SSL verification
      type: string
      default: "true"
    - name: subdirectory
      description: Subdirectory inside the output workspace to clone the repo into
      type: string
      default: ""
    - name: deleteExisting
      description: Delete the contents of the destination directory if it exists before cloning
      type: string
      default: "true"
  steps:
    - name: clone
      image: registry.access.redhat.com/ubi8/git:latest
      script: |
        #!/usr/bin/env sh
        set -eu

        if [ "${PARAM_DELETE_EXISTING}" = "true" ] && [ -d "${CHECKOUT_DIR}" ]; then
          rm -rf "${CHECKOUT_DIR:?}"/*
          rm -rf "${CHECKOUT_DIR:?}"/.* 2>/dev/null || true
        fi

        if [ ! -d "${CHECKOUT_DIR}" ]; then
          mkdir -p "${CHECKOUT_DIR}"
        fi

        cd "${CHECKOUT_DIR}"

        git init
        git config --global user.email "tekton@tekton.dev"
        git config --global user.name "Tekton Pipeline"

        git remote add origin "${PARAM_URL}"
        
        GIT_SSL_VERIFY="${PARAM_SSL_VERIFY}"
        
        if [ "${GIT_SSL_VERIFY}" = "false" ]; then
          git config --global http.sslVerify false
        fi

        git fetch --depth="${PARAM_DEPTH}" origin "${PARAM_REVISION}"
        git checkout FETCH_HEAD

        if [ "${PARAM_SUBMODULES}" = "true" ]; then
          git submodule update --init --recursive
        fi
      env:
        - name: PARAM_URL
          value: $(params.url)
        - name: PARAM_REVISION
          value: $(params.revision)
        - name: PARAM_SUBMODULES
          value: $(params.submodules)
        - name: PARAM_DEPTH
          value: $(params.depth)
        - name: PARAM_SSL_VERIFY
          value: $(params.sslVerify)
        - name: PARAM_DELETE_EXISTING
          value: $(params.deleteExisting)
        - name: CHECKOUT_DIR
          value: $(workspaces.output.path)/$(params.subdirectory)
